%{
#include "hpp.hpp"
Sym module("module",MODULE);
%}
%defines %union { Sym*o; }
%token <o> SYM STR NUM DOC
%token <o> LQ RQ
%token <o> EQ AT
%type <o> ex scalar list
%%
REPL: | REPL ex 	{ module.push($2); } ;
ex	: scalar
	| ex DOC		{ $$=$1; $$->par["doc"]=$2; }
	| LQ list RQ	{ $$=$2; }
	| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); }	
	| ex AT ex		{ $$=$2; $$->push($1); $$->push($3); }	
;
scalar : SYM | STR | NUM ;
list :				{ $$=new List(); }
	 | list ex		{ $$=$1; $$->push($2); } ;
%%
